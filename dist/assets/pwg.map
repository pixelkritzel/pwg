{"version":3,"sources":["vendor/ember-cli/app-prefix.js","pwg/adapters/application.js","pwg/app.js","pwg/controllers/password.js","pwg/controllers/pwg.js","pwg/controllers/service.js","pwg/initializers/app-version.js","pwg/initializers/export-application-global.js","pwg/models/password.js","pwg/models/service.js","pwg/router.js","pwg/routes/application.js","pwg/routes/password.js","pwg/serializers/application.js","pwg/templates/application.js","pwg/templates/password.js","pwg/templates/pwg.js","pwg/tests/adapters/application.jshint.js","pwg/tests/app.jshint.js","pwg/tests/controllers/password.jshint.js","pwg/tests/controllers/pwg.jshint.js","pwg/tests/controllers/service.jshint.js","pwg/tests/helpers/resolver.js","pwg/tests/helpers/resolver.jshint.js","pwg/tests/helpers/start-app.js","pwg/tests/helpers/start-app.jshint.js","pwg/tests/models/password.jshint.js","pwg/tests/models/service.jshint.js","pwg/tests/router.jshint.js","pwg/tests/routes/application.jshint.js","pwg/tests/routes/password.jshint.js","pwg/tests/serializers/application.jshint.js","pwg/tests/test-helper.js","pwg/tests/test-helper.jshint.js","pwg/tests/unit/controllers/password-test.js","pwg/tests/unit/controllers/password-test.jshint.js","pwg/tests/unit/controllers/pwg-test.js","pwg/tests/unit/controllers/pwg-test.jshint.js","pwg/tests/unit/controllers/service-test.js","pwg/tests/unit/controllers/service-test.jshint.js","pwg/tests/unit/controllers/services-test.js","pwg/tests/unit/controllers/services-test.jshint.js","pwg/tests/unit/models/password-test.js","pwg/tests/unit/models/password-test.jshint.js","pwg/tests/unit/models/service-test.js","pwg/tests/unit/models/service-test.jshint.js","pwg/tests/unit/routes/application-test.js","pwg/tests/unit/routes/application-test.jshint.js","pwg/tests/unit/routes/password-test.js","pwg/tests/unit/routes/password-test.jshint.js","pwg/tests/unit/routes/pwg-test.js","pwg/tests/unit/routes/pwg-test.jshint.js","pwg/tests/unit/routes/services-test.js","pwg/tests/unit/routes/services-test.jshint.js","pwg/tests/unit/views/pwg-test.js","pwg/tests/unit/views/pwg-test.jshint.js","pwg/tests/unit/views/services-test.js","pwg/tests/unit/views/services-test.jshint.js","pwg/tests/views/pwg.jshint.js","pwg/views/pwg.js","vendor/ember-cli/app-suffix.js","vendor/ember-cli/app-boot.js"],"sourcesContent":["/* jshint ignore:start */\n\n/* jshint ignore:end */\n","define('pwg/adapters/application', ['exports', 'ember-data'], function (exports, DS) {\n\n  'use strict';\n\n  exports['default'] = DS['default'].LSAdapter.extend({\n    namespace: 'pwg'\n  });\n\n});","define('pwg/app', ['exports', 'ember', 'ember/resolver', 'ember/load-initializers', 'pwg/config/environment'], function (exports, Ember, Resolver, loadInitializers, config) {\n\n  'use strict';\n\n  var App;\n\n  Ember['default'].MODEL_FACTORY_INJECTIONS = true;\n\n  App = Ember['default'].Application.extend({\n    modulePrefix: config['default'].modulePrefix,\n    podModulePrefix: config['default'].podModulePrefix,\n    Resolver: Resolver['default']\n  });\n\n  loadInitializers['default'](App, config['default'].modulePrefix);\n\n  exports['default'] = App;\n\n});","define('pwg/controllers/password', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].ObjectController.extend({\n    copyAble: window.PWGCopyAble\n  });\n\n});","define('pwg/controllers/pwg', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].ArrayController.extend({\n    actions: {\n      setSelectedService: function setSelectedService(selectedService) {\n        this.set('selectedService', selectedService);\n        this.set('showServiceList', false);\n        this.set('errorService', false);\n      },\n\n      removeService: function removeService(service) {\n        service.deleteRecord();\n        service.save();\n      },\n\n      generatePassword: function generatePassword() {\n        var selectedServiceName = this.get('selectedService');\n        if (!selectedServiceName) {\n          this.set('errorService', true);\n        }\n        var salt = this.get('salt') || '';\n        if (salt.length < 6) {\n          this.set('errorSalt', true);\n        }\n        if (this.get('errorService') || this.get('errorSalt')) {\n          return false;\n        }\n        var combinedPassword = selectedServiceName + salt;\n        var password = btoa(CryptoJS.SHA1(combinedPassword)).substr(0, 32);\n        var newPasswordModel = this.store.createRecord('password', {\n          password: password\n        });\n        this.transitionToRoute('password', newPasswordModel);\n      },\n\n      selectedServiceGainsFocus: function selectedServiceGainsFocus() {\n        if (this.get('model').get('length') > 0) {\n          this.set('showServiceList', true);\n        }\n      },\n\n      saveService: function saveService() {\n        var newServiceName = this.get('selectedService');\n        var newService = this.store.createRecord('service', {\n          serviceName: newServiceName\n        });\n        newService.save();\n        this.set('showServiceList', false);\n      },\n\n      selectedServiceKeyUp: function selectedServiceKeyUp(x, event) {\n        if ((this.get('selectedService') || '').trim().length > 0) {\n          this.set('errorService', false);\n          this.set('showServiceList', true);\n        }\n        var keycode = event.which;\n        if (keycode === 13) {\n          this.set('showServiceList', false);\n          this.set('focusSaltField', true);\n        }\n        if (keycode === 27) {\n          this.set('showServiceList', false);\n        }\n      },\n\n      saltKeyUp: function saltKeyUp() {\n        if ((this.get('salt') || '').trim().length > 5) {\n          this.set('errorSalt', false);\n        }\n      }\n    },\n\n    selectedService: null,\n    showServiceList: false,\n    errorService: false,\n    errorSalt: false,\n    errorMessageService: 'You must provide a service name',\n    errorMessageSalt: 'Your salt must be at least 6 characters long',\n\n    filteredServices: (function () {\n      var selectedService = this.get('selectedService');\n      if (selectedService) {\n        return this.filter(function (serviceModel) {\n          return serviceModel.get('serviceName').indexOf(selectedService) !== -1;\n        });\n      } else {\n        return this.get('model');\n      }\n    }).property('selectedService'),\n\n    isSaveAble: (function () {\n      var selectedService = this.get('selectedService') || '';\n      selectedService = selectedService.trim();\n\n      var isNotTheSame = (function () {\n        var withTheSameName = this.filter(function (serviceModel) {\n          return serviceModel.get('serviceName') === selectedService;\n        });\n        return withTheSameName.length === 0;\n      }).bind(this);\n\n      return selectedService.length > 0 && isNotTheSame();\n    }).property('selectedService')\n  });\n\n});","define('pwg/controllers/service', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].ObjectController.extend({\n    actions: {\n      deleteService: function deleteService() {\n        var service = this.get('model');\n        service.deleteRecord();\n        service.save();\n      }\n    }\n  });\n\n});","define('pwg/initializers/app-version', ['exports', 'pwg/config/environment', 'ember'], function (exports, config, Ember) {\n\n  'use strict';\n\n  var classify = Ember['default'].String.classify;\n  var registered = false;\n\n  exports['default'] = {\n    name: 'App Version',\n    initialize: function initialize(container, application) {\n      if (!registered) {\n        var appName = classify(application.toString());\n        Ember['default'].libraries.register(appName, config['default'].APP.version);\n        registered = true;\n      }\n    }\n  };\n\n});","define('pwg/initializers/export-application-global', ['exports', 'ember', 'pwg/config/environment'], function (exports, Ember, config) {\n\n  'use strict';\n\n  exports.initialize = initialize;\n\n  function initialize(container, application) {\n    var classifiedName = Ember['default'].String.classify(config['default'].modulePrefix);\n\n    if (config['default'].exportApplicationGlobal && !window[classifiedName]) {\n      window[classifiedName] = application;\n    }\n  }\n\n  ;\n\n  exports['default'] = {\n    name: 'export-application-global',\n\n    initialize: initialize\n  };\n\n});","define('pwg/models/password', ['exports', 'ember-data'], function (exports, DS) {\n\n  'use strict';\n\n  exports['default'] = DS['default'].Model.extend({\n    password: DS['default'].attr('string')\n  });\n\n});","define('pwg/models/service', ['exports', 'ember-data'], function (exports, DS) {\n\n  'use strict';\n\n  exports['default'] = DS['default'].Model.extend({\n    serviceName: DS['default'].attr('string')\n  });\n\n});","define('pwg/router', ['exports', 'ember', 'pwg/config/environment'], function (exports, Ember, config) {\n\n  'use strict';\n\n  var Router = Ember['default'].Router.extend({\n    location: config['default'].locationType\n  });\n\n  exports['default'] = Router.map(function () {\n    this.route('pwg', { path: '/' });\n    this.route('services');\n    this.route('password', { path: '/password/:password_id' });\n  });\n\n});","define('pwg/routes/application', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Route.extend({\n    model: function model() {\n      return this.get('store').find('service');\n    }\n  });\n\n});","define('pwg/routes/password', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Route.extend({\n\n    model: function model() {\n      var model = this.get('store').find('password');\n      return model;\n    },\n\n    deactivate: function deactivate() {\n      this.currentModel.destroy();\n    }\n  });\n\n});","define('pwg/serializers/application', ['exports', 'ember-data'], function (exports, DS) {\n\n\t'use strict';\n\n\texports['default'] = DS['default'].LSSerializer.extend();\n\n});","define('pwg/templates/application', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.11.1\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"container\");\n        var el2 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createComment(\"\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, content = hooks.content;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(dom.childAt(fragment, [0]),1,1);\n        content(env, morph0, context, \"outlet\");\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('pwg/templates/password', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.11.1\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"Back\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          return fragment;\n        }\n      };\n    }());\n    var child1 = (function() {\n      var child0 = (function() {\n        return {\n          isHTMLBars: true,\n          revision: \"Ember@1.11.1\",\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"    \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"div\");\n            dom.setAttribute(el1,\"class\",\"pwg_copy-button-container\");\n            var el2 = dom.createTextNode(\"\\n      \");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createElement(\"button\");\n            dom.setAttribute(el2,\"type\",\"button\");\n            dom.setAttribute(el2,\"class\",\"btn pwg_password-copy-button\");\n            var el3 = dom.createTextNode(\"\\n        Copy!\\n      \");\n            dom.appendChild(el2, el3);\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"\\n    \");\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, get = hooks.get, concat = hooks.concat, attribute = hooks.attribute;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var element0 = dom.childAt(fragment, [1, 1]);\n            var attrMorph0 = dom.createAttrMorph(element0, 'data-pwg-password');\n            attribute(env, attrMorph0, element0, \"data-pwg-password\", concat(env, [get(env, context, \"password\")]));\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.11.1\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"  \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"div\");\n          dom.setAttribute(el1,\"class\",\"pwg_password\");\n          var el2 = dom.createTextNode(\"\\n    \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createComment(\"\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n  \");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment(\"\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, content = hooks.content, get = hooks.get, block = hooks.block;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);\n          var morph1 = dom.createMorphAt(fragment,3,3,contextualElement);\n          dom.insertBoundary(fragment, null);\n          content(env, morph0, context, \"password\");\n          block(env, morph1, context, \"if\", [get(env, context, \"copyAble\")], {}, child0, null);\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.11.1\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"services_back-link\");\n        var el2 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createComment(\"\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, block = hooks.block, get = hooks.get;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(dom.childAt(fragment, [0]),1,1);\n        var morph1 = dom.createMorphAt(fragment,2,2,contextualElement);\n        dom.insertBoundary(fragment, null);\n        block(env, morph0, context, \"link-to\", [\"pwg\"], {}, child0, null);\n        block(env, morph1, context, \"if\", [get(env, context, \"password\")], {}, child1, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('pwg/templates/pwg', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      var child0 = (function() {\n        return {\n          isHTMLBars: true,\n          revision: \"Ember@1.11.1\",\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"          \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"li\");\n            var el2 = dom.createTextNode(\"\\n            \");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createElement(\"button\");\n            dom.setAttribute(el2,\"class\",\"btn btn-link pwg_filtered-service--name\");\n            dom.setAttribute(el2,\"type\",\"button\");\n            dom.setAttribute(el2,\"role\",\"button\");\n            var el3 = dom.createTextNode(\"\\n              \");\n            dom.appendChild(el2, el3);\n            var el3 = dom.createComment(\"\");\n            dom.appendChild(el2, el3);\n            var el3 = dom.createTextNode(\"\\n            \");\n            dom.appendChild(el2, el3);\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"\\n            \");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createElement(\"button\");\n            dom.setAttribute(el2,\"class\",\"btn pwg_filtered-service--remove\");\n            dom.setAttribute(el2,\"type\",\"button\");\n            dom.setAttribute(el2,\"role\",\"button\");\n            var el3 = dom.createTextNode(\"\\n              ×\\n            \");\n            dom.appendChild(el2, el3);\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"\\n          \");\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, get = hooks.get, element = hooks.element, content = hooks.content;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var element1 = dom.childAt(fragment, [1]);\n            var element2 = dom.childAt(element1, [1]);\n            var element3 = dom.childAt(element1, [3]);\n            var morph0 = dom.createMorphAt(element2,1,1);\n            element(env, element2, context, \"action\", [\"setSelectedService\", get(env, context, \"service.serviceName\")], {});\n            content(env, morph0, context, \"service.serviceName\");\n            element(env, element3, context, \"action\", [\"removeService\", get(env, context, \"service\")], {});\n            return fragment;\n          }\n        };\n      }());\n      var child1 = (function() {\n        return {\n          isHTMLBars: true,\n          revision: \"Ember@1.11.1\",\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"          \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"li\");\n            var el2 = dom.createElement(\"button\");\n            dom.setAttribute(el2,\"class\",\"btn btn-link\");\n            dom.setAttribute(el2,\"type\",\"button\");\n            dom.setAttribute(el2,\"role\",\"button\");\n            var el3 = dom.createTextNode(\"Save Service\");\n            dom.appendChild(el2, el3);\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, get = hooks.get, element = hooks.element;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var element0 = dom.childAt(fragment, [1, 0]);\n            element(env, element0, context, \"action\", [\"saveService\", get(env, context, \"service.serviceName\")], {});\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.11.1\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"    \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"div\");\n          dom.setAttribute(el1,\"style\",\"position:relative\");\n          var el2 = dom.createTextNode(\"\\n      \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"ul\");\n          dom.setAttribute(el2,\"class\",\"pwg_filtered-services\");\n          var el3 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createComment(\"\");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createComment(\"\");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"      \");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n    \");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, block = hooks.block;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var element4 = dom.childAt(fragment, [1, 1]);\n          var morph0 = dom.createMorphAt(element4,1,1);\n          var morph1 = dom.createMorphAt(element4,2,2);\n          block(env, morph0, context, \"each\", [get(env, context, \"filteredServices\")], {\"keyword\": \"service\"}, child0, null);\n          block(env, morph1, context, \"if\", [get(env, context, \"isSaveAble\")], {}, child1, null);\n          return fragment;\n        }\n      };\n    }());\n    var child1 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.11.1\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"    \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment(\"\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, content = hooks.content;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);\n          content(env, morph0, context, \"errorMessageService\");\n          return fragment;\n        }\n      };\n    }());\n    var child2 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.11.1\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"    \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment(\"\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, content = hooks.content;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);\n          content(env, morph0, context, \"errorMessageSalt\");\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.11.1\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"pwg_selected-service-container\");\n        var el2 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createComment(\"\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createComment(\"\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"pwg_errormessage\");\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createComment(\"\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"pwg_errormessage\");\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createComment(\"\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"pwg_generate-button-container\");\n        var el2 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"button\");\n        dom.setAttribute(el2,\"type\",\"button\");\n        dom.setAttribute(el2,\"class\",\"btn\");\n        var el3 = dom.createTextNode(\"Generate!\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, content = hooks.content, get = hooks.get, inline = hooks.inline, block = hooks.block, element = hooks.element;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element5 = dom.childAt(fragment, [2]);\n        var element6 = dom.childAt(fragment, [10, 1]);\n        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n        var morph1 = dom.createMorphAt(element5,1,1);\n        var morph2 = dom.createMorphAt(element5,3,3);\n        var morph3 = dom.createMorphAt(dom.childAt(fragment, [4]),1,1);\n        var morph4 = dom.createMorphAt(fragment,6,6,contextualElement);\n        var morph5 = dom.createMorphAt(dom.childAt(fragment, [8]),1,1);\n        dom.insertBoundary(fragment, 0);\n        content(env, morph0, context, \"outlet\");\n        inline(env, morph1, context, \"input\", [], {\"value\": get(env, context, \"selectedService\"), \"focus-in\": \"selectedServiceGainsFocus\", \"key-up\": \"selectedServiceKeyUp\", \"class\": \"pwg_input-service form-control\", \"placeholder\": \"Service Name\"});\n        block(env, morph2, context, \"if\", [get(env, context, \"showServiceList\")], {}, child0, null);\n        block(env, morph3, context, \"if\", [get(env, context, \"errorService\")], {}, child1, null);\n        inline(env, morph4, context, \"input\", [], {\"value\": get(env, context, \"salt\"), \"action\": \"generatePassword\", \"on\": \"enter\", \"key-up\": \"saltKeyUp\", \"class\": \"pwg_input-phrase js-salt form-control\", \"placeholder\": \"Secret Phrase\"});\n        block(env, morph5, context, \"if\", [get(env, context, \"errorSalt\")], {}, child2, null);\n        element(env, element6, context, \"action\", [\"generatePassword\"], {});\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('pwg/tests/adapters/application.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - adapters');\n  test('adapters/application.js should pass jshint', function() { \n    ok(true, 'adapters/application.js should pass jshint.'); \n  });\n\n});","define('pwg/tests/app.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - .');\n  test('app.js should pass jshint', function() { \n    ok(true, 'app.js should pass jshint.'); \n  });\n\n});","define('pwg/tests/controllers/password.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - controllers');\n  test('controllers/password.js should pass jshint', function() { \n    ok(true, 'controllers/password.js should pass jshint.'); \n  });\n\n});","define('pwg/tests/controllers/pwg.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - controllers');\n  test('controllers/pwg.js should pass jshint', function() { \n    ok(false, 'controllers/pwg.js should pass jshint.\\ncontrollers/pwg.js: line 29, col 27, \\'CryptoJS\\' is not defined.\\n\\n1 error'); \n  });\n\n});","define('pwg/tests/controllers/service.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - controllers');\n  test('controllers/service.js should pass jshint', function() { \n    ok(true, 'controllers/service.js should pass jshint.'); \n  });\n\n});","define('pwg/tests/helpers/resolver', ['exports', 'ember/resolver', 'pwg/config/environment'], function (exports, Resolver, config) {\n\n  'use strict';\n\n  var resolver = Resolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: config['default'].modulePrefix,\n    podModulePrefix: config['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n\n});","define('pwg/tests/helpers/resolver.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - helpers');\n  test('helpers/resolver.js should pass jshint', function() { \n    ok(true, 'helpers/resolver.js should pass jshint.'); \n  });\n\n});","define('pwg/tests/helpers/start-app', ['exports', 'ember', 'pwg/app', 'pwg/router', 'pwg/config/environment'], function (exports, Ember, Application, Router, config) {\n\n  'use strict';\n\n\n\n  exports['default'] = startApp;\n  function startApp(attrs) {\n    var application;\n\n    var attributes = Ember['default'].merge({}, config['default'].APP);\n    attributes = Ember['default'].merge(attributes, attrs); // use defaults, but you can override;\n\n    Ember['default'].run(function () {\n      application = Application['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n    });\n\n    return application;\n  }\n\n});","define('pwg/tests/helpers/start-app.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - helpers');\n  test('helpers/start-app.js should pass jshint', function() { \n    ok(true, 'helpers/start-app.js should pass jshint.'); \n  });\n\n});","define('pwg/tests/models/password.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - models');\n  test('models/password.js should pass jshint', function() { \n    ok(true, 'models/password.js should pass jshint.'); \n  });\n\n});","define('pwg/tests/models/service.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - models');\n  test('models/service.js should pass jshint', function() { \n    ok(true, 'models/service.js should pass jshint.'); \n  });\n\n});","define('pwg/tests/router.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - .');\n  test('router.js should pass jshint', function() { \n    ok(true, 'router.js should pass jshint.'); \n  });\n\n});","define('pwg/tests/routes/application.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - routes');\n  test('routes/application.js should pass jshint', function() { \n    ok(true, 'routes/application.js should pass jshint.'); \n  });\n\n});","define('pwg/tests/routes/password.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - routes');\n  test('routes/password.js should pass jshint', function() { \n    ok(true, 'routes/password.js should pass jshint.'); \n  });\n\n});","define('pwg/tests/serializers/application.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - serializers');\n  test('serializers/application.js should pass jshint', function() { \n    ok(true, 'serializers/application.js should pass jshint.'); \n  });\n\n});","define('pwg/tests/test-helper', ['pwg/tests/helpers/resolver', 'ember-qunit'], function (resolver, ember_qunit) {\n\n\t'use strict';\n\n\tember_qunit.setResolver(resolver['default']);\n\n});","define('pwg/tests/test-helper.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - .');\n  test('test-helper.js should pass jshint', function() { \n    ok(true, 'test-helper.js should pass jshint.'); \n  });\n\n});","define('pwg/tests/unit/controllers/password-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor('controller:password', {});\n\n  // Replace this with your real tests.\n  ember_qunit.test('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n\n  // Specify the other units that are required for this test.\n  // needs: ['controller:foo']\n\n});","define('pwg/tests/unit/controllers/password-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/controllers');\n  test('unit/controllers/password-test.js should pass jshint', function() { \n    ok(true, 'unit/controllers/password-test.js should pass jshint.'); \n  });\n\n});","define('pwg/tests/unit/controllers/pwg-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor('controller:pwg', 'PwgController', {});\n\n  // Replace this with your real tests.\n  ember_qunit.test('it exists', function () {\n    var controller = this.subject();\n    ok(controller);\n  });\n\n  // Specify the other units that are required for this test.\n  // needs: ['controller:foo']\n\n});","define('pwg/tests/unit/controllers/pwg-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/controllers');\n  test('unit/controllers/pwg-test.js should pass jshint', function() { \n    ok(false, 'unit/controllers/pwg-test.js should pass jshint.\\nunit/controllers/pwg-test.js: line 14, col 3, \\'ok\\' is not defined.\\n\\n1 error'); \n  });\n\n});","define('pwg/tests/unit/controllers/service-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor('controller:service', 'ServiceController', {});\n\n  // Replace this with your real tests.\n  ember_qunit.test('it exists', function () {\n    var controller = this.subject();\n    ok(controller);\n  });\n\n  // Specify the other units that are required for this test.\n  // needs: ['controller:foo']\n\n});","define('pwg/tests/unit/controllers/service-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/controllers');\n  test('unit/controllers/service-test.js should pass jshint', function() { \n    ok(false, 'unit/controllers/service-test.js should pass jshint.\\nunit/controllers/service-test.js: line 14, col 3, \\'ok\\' is not defined.\\n\\n1 error'); \n  });\n\n});","define('pwg/tests/unit/controllers/services-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor('controller:services', 'ServicesController', {});\n\n  // Replace this with your real tests.\n  ember_qunit.test('it exists', function () {\n    var controller = this.subject();\n    ok(controller);\n  });\n\n  // Specify the other units that are required for this test.\n  // needs: ['controller:foo']\n\n});","define('pwg/tests/unit/controllers/services-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/controllers');\n  test('unit/controllers/services-test.js should pass jshint', function() { \n    ok(false, 'unit/controllers/services-test.js should pass jshint.\\nunit/controllers/services-test.js: line 14, col 3, \\'ok\\' is not defined.\\n\\n1 error'); \n  });\n\n});","define('pwg/tests/unit/models/password-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleForModel('password', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  ember_qunit.test('it exists', function (assert) {\n    var model = this.subject();\n    // var store = this.store();\n    assert.ok(!!model);\n  });\n\n});","define('pwg/tests/unit/models/password-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/models');\n  test('unit/models/password-test.js should pass jshint', function() { \n    ok(true, 'unit/models/password-test.js should pass jshint.'); \n  });\n\n});","define('pwg/tests/unit/models/service-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleForModel('service', 'Service', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  ember_qunit.test('it exists', function () {\n    var model = this.subject();\n    // var store = this.store();\n    ok(!!model);\n  });\n\n});","define('pwg/tests/unit/models/service-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/models');\n  test('unit/models/service-test.js should pass jshint', function() { \n    ok(false, 'unit/models/service-test.js should pass jshint.\\nunit/models/service-test.js: line 14, col 3, \\'ok\\' is not defined.\\n\\n1 error'); \n  });\n\n});","define('pwg/tests/unit/routes/application-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor('route:application', 'ApplicationRoute', {});\n\n  ember_qunit.test('it exists', function () {\n    var route = this.subject();\n    ok(route);\n  });\n\n  // Specify the other units that are required for this test.\n  // needs: ['controller:foo']\n\n});","define('pwg/tests/unit/routes/application-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/routes');\n  test('unit/routes/application-test.js should pass jshint', function() { \n    ok(false, 'unit/routes/application-test.js should pass jshint.\\nunit/routes/application-test.js: line 13, col 3, \\'ok\\' is not defined.\\n\\n1 error'); \n  });\n\n});","define('pwg/tests/unit/routes/password-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor('route:password', {});\n\n  ember_qunit.test('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n\n  // Specify the other units that are required for this test.\n  // needs: ['controller:foo']\n\n});","define('pwg/tests/unit/routes/password-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/routes');\n  test('unit/routes/password-test.js should pass jshint', function() { \n    ok(true, 'unit/routes/password-test.js should pass jshint.'); \n  });\n\n});","define('pwg/tests/unit/routes/pwg-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor('route:pwg', 'PwgRoute', {});\n\n  ember_qunit.test('it exists', function () {\n    var route = this.subject();\n    ok(route);\n  });\n\n  // Specify the other units that are required for this test.\n  // needs: ['controller:foo']\n\n});","define('pwg/tests/unit/routes/pwg-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/routes');\n  test('unit/routes/pwg-test.js should pass jshint', function() { \n    ok(false, 'unit/routes/pwg-test.js should pass jshint.\\nunit/routes/pwg-test.js: line 13, col 3, \\'ok\\' is not defined.\\n\\n1 error'); \n  });\n\n});","define('pwg/tests/unit/routes/services-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor('route:services', 'ServicesRoute', {});\n\n  ember_qunit.test('it exists', function () {\n    var route = this.subject();\n    ok(route);\n  });\n\n  // Specify the other units that are required for this test.\n  // needs: ['controller:foo']\n\n});","define('pwg/tests/unit/routes/services-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/routes');\n  test('unit/routes/services-test.js should pass jshint', function() { \n    ok(false, 'unit/routes/services-test.js should pass jshint.\\nunit/routes/services-test.js: line 13, col 3, \\'ok\\' is not defined.\\n\\n1 error'); \n  });\n\n});","define('pwg/tests/unit/views/pwg-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor('view:pwg');\n\n  // Replace this with your real tests.\n  ember_qunit.test('it exists', function (assert) {\n    var view = this.subject();\n    assert.ok(view);\n  });\n\n});","define('pwg/tests/unit/views/pwg-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/views');\n  test('unit/views/pwg-test.js should pass jshint', function() { \n    ok(true, 'unit/views/pwg-test.js should pass jshint.'); \n  });\n\n});","define('pwg/tests/unit/views/services-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor('view:services', 'ServicesView');\n\n  // Replace this with your real tests.\n  ember_qunit.test('it exists', function () {\n    var view = this.subject();\n    ok(view);\n  });\n\n});","define('pwg/tests/unit/views/services-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/views');\n  test('unit/views/services-test.js should pass jshint', function() { \n    ok(false, 'unit/views/services-test.js should pass jshint.\\nunit/views/services-test.js: line 11, col 3, \\'ok\\' is not defined.\\n\\n1 error'); \n  });\n\n});","define('pwg/tests/views/pwg.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - views');\n  test('views/pwg.js should pass jshint', function() { \n    ok(false, 'views/pwg.js should pass jshint.\\nviews/pwg.js: line 7, col 37, \\'$\\' is not defined.\\nviews/pwg.js: line 9, col 5, \\'$\\' is not defined.\\nviews/pwg.js: line 17, col 5, \\'$\\' is not defined.\\n\\n3 errors'); \n  });\n\n});","define('pwg/views/pwg', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].View.extend({\n    didInsertElement: function didInsertElement() {\n\n      var controller = this.get('controller');\n      var $selectedServiceContainer = $('.pwg_selected-service-container');\n\n      $(window).on('click.pwgFocusControlForSelectedService', function (event) {\n        if (!$selectedServiceContainer.is(event.target) && $selectedServiceContainer.has(event.target).length === 0) {\n          controller.set('showServiceList', false);\n        }\n      });\n    },\n\n    willDestroyElement: function willDestroyElement() {\n      $(window).off('click.pwgFocusControlForSelectedService');\n    },\n\n    focusSalt: (function () {\n      if (this.get('controller.focusSaltField')) {\n        this.$('.js-salt').focus();\n      }\n    }).observes('controller.focusSaltField')\n  });\n\n});","/* jshint ignore:start */\n\n/* jshint ignore:end */\n","/* jshint ignore:start */\n\ndefine('pwg/config/environment', ['ember'], function(Ember) {\n  var prefix = 'pwg';\n/* jshint ignore:start */\n\ntry {\n  var metaName = prefix + '/config/environment';\n  var rawConfig = Ember['default'].$('meta[name=\"' + metaName + '\"]').attr('content');\n  var config = JSON.parse(unescape(rawConfig));\n\n  return { 'default': config };\n}\ncatch(err) {\n  throw new Error('Could not read config from meta tag with name \"' + metaName + '\".');\n}\n\n/* jshint ignore:end */\n\n});\n\nif (runningTests) {\n  require(\"pwg/tests/test-helper\");\n} else {\n  require(\"pwg/app\")[\"default\"].create({\"LOG_ACTIVE_GENERATION\":true,\"LOG_VIEW_LOOKUPS\":true,\"name\":\"pwg\",\"version\":\"0.0.0.a01b0e41\"});\n}\n\n/* jshint ignore:end */\n"],"names":[],"mappings":"AAAA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClzXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;","file":"pwg.js"}